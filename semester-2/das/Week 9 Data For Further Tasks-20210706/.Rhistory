x
#d
x=gen.gamma(1000,47,26)
x
for(i in 1:1000){
x[i]=gen.gamma.once(1000,mu,sigma)
}
for(i in 1:1000){
x[i]=gen.gamma(1000,47,26)
}
x
#d
x=gen.gamma(1000,47,26)
x
#10
#a
f=function(x,a,b){
(b^a)*(gamma(a))^(-1)*x^(a-1)*exp(-b*x)
}
#b
g=function(x,lambda){
lambda*exp(-lambda*x)
}
gen.gamma.once=function(n,mu,sigma){ #auxiliary function
x=numeric(n)
a=mu^2/sigma^2 #1
b=mu/sigma^2
lambda=b/a #2
x.star=a/b
c=f(x.star,a,b)/g(x.star,lambda) #3
while(TRUE){
y=rexp(1, rate = lambda) #4.1
u=runif(1) #4.2
alpha=f(y,a,b)/(c*g(y,lambda)) #4.3
if(u<alpha) break
}
x=y #4.4
}
#d
x=gen.gamma.once(1000,47,26)
for(i in 1:1000){
x[i]=gen.gamma.once(1000,47,26)
}
for(i in 1:1000){
x[i]=gen.gamma.once(1000,47,26)
}
x
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
for(i in 1:n){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
#d
x=gen.gamma(1000,47,26)
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
ntimes=n
for(i in 1:ntimes){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
ntimes=n
for(i in 1:ntimes){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
#d
x=gen.gamma(1000,47,26)
#succeed
for(i in 1:1000){
x[i]=gen.gamma.once(1000,47,26)
}
#or
for(i in 1:1000){
x[i]=gen.gamma.once(1000,47,26)
}
x
hist(x,freq=F)
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
k=n
for(k in 1:k){
x[k]=gen.gamma.once(n,mu,sigma)
}
}
x=gen.gamma(1000,47,26)
View(g)
f=function(x,a,b){
(b^a)*(gamma(a))^(-1)*x^(a-1)*exp(-b*x)
}
#b
g=function(x,lambda){
lambda*exp(-lambda*x)
}
x=numeric(100000)
gen.gamma=function(n,mu,sigma){ #gen.gamma
k=n
for(k in 1:k){
x[k]=gen.gamma.once(n,mu,sigma)
}
}
x=gen.gamma(1000,47,26)
x=numeric(100000)
gen.gamma=function(n,mu,sigma){ #gen.gamma
replicate(n,gen.gamma(n,mu,sigma))
}
x=replicate(100,gen.gamma(n,mu,sigma))
x=replicate(100,gen.gamma(1000,47,26))
x=replicate(3,gen.gamma(1000,47,26))
a
1
A
A=cbind(c(1,1),c(1,-1))
A
install.packages("nycflights13") #Only include if the package hasn't already been installed
1
install.packages("nycflights13") #Only include if the package hasn't already been installed
library(ggplot2)
library(nycflights13)
print("Well done!  You've loaded the libraries")
install.packages("nycflights13") #Only include if the package hasn't already been installed
install.packages("nycflights13") #Only include if the package hasn't already been installed
install.packages("nycflights13") #Only include if the package hasn't already been installed
1
install.packages("nycflights13") #Only include if the package hasn't already been installed
install.packages("nycflights13") #Only include if the package hasn't already been installed
nycflights13
install.packages("nycflights13") #Only include if the package hasn't already been installed
library(ggplot2)
1
library(nycflights13)
install.packages("nycflights13") #Only include if the package hasn't already been installed
install.packages("nycflights13") #Only include if the package hasn't already been installed
#das_lab_1
install.packages("ggplot2") #Only include if the package hasn't already been installed
library(ggplot2)
install.packages("nycflights13") #Only include if the package hasn't already been installed
install.packages("nycflights13") #Only include if the package hasn't already been installed
install.packages("nycflights13") #Only include if the package hasn't already been installed
library(R2OpenBUGS)
model{{
model{{
theta~dunif(0,1)
}
model{
theta~dunif(0,1)
}
model{theta~dunif(0,1)}
#HW2_problem 4
nsamp=100000
theta=rbeta(nsamp,17,5)
mean(theta>0.5&theta<0.7)
mean(theta)
quantile(theta,probs=c(0.025,0.975))  # 95% central posterior
library(ggplot2)
install.packages("nycflights13") #Only include if the package hasn't already been installed
1
library(ggplot2)
install.packages("nycflights13") #Only include if the package hasn't already been installed
print("Well done!  You've loaded the libraries")
install.packages("nycflights13") #Only include if the package hasn't already been installed
library(nycflights13)
library(nycflights13)
install.packages("nycflights13") #Only include if the package hasn't already been installed
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, warning = FALSE, message = FALSE, comment = NA)
model=lm(Hwt~Sex,data=cats)
g(pi)=log(pi1−pi),
###
library(tidyverse)
library(moderndive)
library(gapminder)
library(sjPlot)
library(stats)
library(jtools)
eval.gender=evals%>%select(gender,age)
eval.gender
#现在，让我们看一下ageby的箱线图，gender以获得对数据的初步印象：
ggplot(data=evals.gender,aes(x=gender,y=age,fill=gender))+
geom_boxplot()+
labs(x="Gender",y="Age")+
theme(legend.position="non")
evals.gender=evals%>%select(gender,age)
evals.gender
#现在，让我们看一下ageby的箱线图，gender以获得对数据的初步印象：
ggplot(data=evals.gender,aes(x=gender,y=age,fill=gender))+
geom_boxplot()+
labs(x="Gender",y="Age")+
theme(legend.position="non")
#对数赔率
#为了拟合逻辑回归模型，我们将使用广义线性模型函数glm，其作用方式与lm我们之前使用的函数非常相似。我们只需要处理一个额外的参数。以性别为响应，以年龄为解释变量的逻辑回归模型由下式给出：
model=glm(gender~age,data=evals,gender,
family=binomial(link="logit"))
#对数赔率
#为了拟合逻辑回归模型，我们将使用广义线性模型函数glm，其作用方式与lm我们之前使用的函数非常相似。我们只需要处理一个额外的参数。以性别为响应，以年龄为解释变量的逻辑回归模型由下式给出：
model <- glm(gender ~ age, data = evals.gender,
family = binomial(link = "logit"))
#这里我们包含了附加family参数，它说明了我们想要使用的分布和链接函数。因此，family = binomial(link = "logit")我们有一个二元响应变量，因此有一个二项式分布，及其相应的logit 链接函数。现在，让我们看看我们的逻辑回归模型产生的总结：
model%>%summary()
#一个替代方法summary()是包中的summ()函数，它允许对汇总表中包含的内容进行更多控制，并提供更好的格式输出。这是上面拟合模型的默认输出......jtools
summ(model)
#为了解释这个拟合模型，首先我们注意到我们的二元响应的基线类别是female。这是因为 R 中的默认基线被视为按字母顺序排在第一位的基线，这可以从levels函数中看出：
levels(evals.gender$gender)
mod1coefs <- round(coef(model), 2)
mod1coefs
confint(model) %>%
kable()
confint(model) %>%
knitr::kable()
mod.coef.logodds <- model %>%
summary() %>%
coef()
age.logodds.lower <- mod.coef.logodds["age", "Estimate"] -
1.96 * mod.coef.logodds["age", "Std. Error"]
age.logodds.lower
age.logodds.upper <- mod.coef.logodds["age", "Estimate"] +
1.96 * mod.coef.logodds["age", "Std. Error"]
mod.coef.logodds["age", "Estimate"]
confint(model) %>%
knitr::kable()
mod.coef.logodds["age", "Estimate"] -
1.96 * mod.coef.logodds["age", "Std. Error"]
#因此，对数优势的点估计值为 0.06，相应的 95% 置信区间为 (0.04, 0.08)。这可以使用包中的plot_model函数以图形方式显示sjPlot，只需将 ourmodel作为参数传递：
plot_model(model, show.values = TRUE, transform = NULL,
title = "Log-Odds (Male instructor)", show.p = FALSE)
evals.gender
evals.gender <- evals.gender %>%
mutate(logodds.male = predict(model))
evals.gender
evals.gender %>%
mutate(logodds.male = predict(model))
%>%
#磷1 - p=经验( α + β⋅年龄) ,
model %>%
coef() %>%
exp()
model %>%
coef()
model %>%
coef() %>%
exp()
age.odds.lower <- exp(age.logodds.lower)
age.odds.lower
age.odds.upper <- exp(age.logodds.upper)
age.odds.upper
#因此，赔率的点估计值为 1.06，相应的 95% 置信区间为 (1.04, 1.09)。这可以使用包中的plot_model函数以图形方式显示sjPlot，只需将 ourmodel作为参数传递并删除transform = NULL（默认转换是指数转换）
plot_model(model, show.values = TRUE, axis.lim = c(1,1.5),
title = "Odds (Male instructor)", show.p = FALSE)
model
#现在，让我们将几率的估计添加到我们的数据集中：
evals.gender <- evals.gender %>%
mutate(odds.male = exp(logodds.male))
p.num <- exp(mod.coef.logodds["(Intercept)", "Estimate"] + mod.coef.logodds["age", "Estimate"] * 52)
p.denom <- 1 + p.num
p.num / p.denom
#库中的plogis()函数stats也可用于从对数赔率中获取概率：
plogis(mod.coef.logodds["(Intercept)", "Estimate"] + mod.coef.logodds["age", "Estimate"] * 52)
#让我们将概率添加到我们的数据中，这是使用fitted()函数完成的：
evals.gender <- evals.gender %>%
mutate(probs.male = fitted(model))
evals.gender
ggplot(data = evals.gender, aes(x = age, y = probs.male)) +
geom_smooth(method="glm",
method.args = list(family="binomial"),
se = FALSE) +
labs(x = "Age", y = "Probability of instructor being male")
#包中的plot_model()函数sjPlot还可以通过age如下方式产生估计概率：
plot_model(model, type = "pred", title = "",
axis.title = c("Age", "Prob. of instructor being male"))
#具有一个分类解释变量的二元逻辑回归
#age现在让我们使用二进制分类变量ethnicity作为我们的解释变量，而不是像 那样使用数值解释变量。
evals.ethnic <- evals %>%
select(gender, ethnicity)
evals.ethnic
evals %>%
tabyl(ethnicity, gender)
#正如我们在第 7 周中首次看到的，我们可以使用该janitor包以表格格式汇总这些数据：
evals %>%
tabyl(ethnicity, gender) %>%
adorn_percentages() %>%
adorn_pct_formatting() %>%
adorn_ns() # To show original counts
#正如我们在第 7 周中首次看到的，我们可以使用该janitor包以表格格式汇总这些数据：
library(janitor)
evals %>%
tabyl(ethnicity, gender)
evals %>%
tabyl(ethnicity, gender) %>%
adorn_percentages()
evals %>%
tabyl(ethnicity, gender) %>%
adorn_percentages() %>%
adorn_pct_formatting()
evals %>%
tabyl(ethnicity, gender) %>%
adorn_percentages() %>%
adorn_pct_formatting() %>%
adorn_ns()
ggplot(evals, aes(x= gender,  y = ..prop.., group=ethnicity, fill=ethnicity)) +
geom_bar(position="dodge", stat="count") +
labs(y = "Proportion")
ggplot(evals, aes(x= gender,  y = ..prop.., group=ethnicity, fill=ethnicity))
ggplot(evals, aes(x= gender,  y = ..prop.., group=ethnicity, fill=ethnicity)) +
geom_bar(position="dodge", stat="count")
ggplot(evals, aes(x= gender,  y = ..prop.., group=ethnicity, fill=ethnicity))
..prop..
ggplot(evals, aes(x= gender,  y = ..prop.., group=ethnicity, fill=ethnicity))
#对数赔率
#逻辑回归模型由下式给出：
model.ethnic <- glm(gender ~ ethnicity, data = evals.ethnic, family = binomial(link = "logit"))
model.ethnic %>%
summary()
levels(evals.ethnic$ethnicity)
confint(model.ethnic) %>%
knitr::kable()
mod.ethnic.coef.logodds <- model.ethnic %>%
summary() %>%
coef()
ethnic.logodds.lower <- mod.ethnic.coef.logodds["ethnicitynot minority", "Estimate"] -
1.96 * mod.ethnic.coef.logodds["ethnicitynot minority", "Std. Error"]
#[1] 0.1300587
ethnic.logodds.upper <- mod.ethnic.coef.logodds["ethnicitynot minority", "Estimate"] +
1.96 * mod.ethnic.coef.logodds["ethnicitynot minority", "Std. Error"]
plot_model(model.ethnic, show.values = TRUE, transform = NULL,
title = "Log-Odds (Male instructor)", show.p = FALSE)
#  Oddsnot minorityOddsminority=pnot minority1−pnot minoritypminority1−pminority=exp(α+β)exp(α)=exp(α+β−α)=exp(β)=exp(0.66)=1.93.
# the number of instructors not in the minority
pnotmin <- evals.ethnic %>%
filter(ethnicity == "not minority") %>%
summarize(n()) %>%
pull()
# the number of male instructors not in the minority
pnotmin.male <- evals.ethnic %>%
filter(ethnicity == "not minority", gender == "male") %>%
summarize(n()) %>%
pull()
# the proportion/probability of males not in the minority
prob.notmin.male <- pnotmin.male / pnotmin
odds.notmin.male <- prob.notmin.male / (1 - prob.notmin.male)
odds.ratio.notmin <- odds.notmin.male / odds.min.male
pmin <- evals.ethnic %>%
filter(ethnicity == "minority") %>%
summarize(n()) %>%
pull()
# the number of male instructors in the minority
pmin.male <- evals.ethnic %>%
filter(ethnicity == "minority", gender == "male") %>%
summarize(n()) %>%
pull()
# the proportion/probability of males in the minority
prob.min.male <- pmin.male / pmin
odds.min.male <- prob.min.male / (1 - prob.min.male)
odds.min.male
pnotmin <- evals.ethnic %>%
filter(ethnicity == "not minority") %>%
summarize(n()) %>%
pull()
# the number of male instructors not in the minority
pnotmin.male <- evals.ethnic %>%
filter(ethnicity == "not minority", gender == "male") %>%
summarize(n()) %>%
pull()
# the proportion/probability of males not in the minority
prob.notmin.male <- pnotmin.male / pnotmin
odds.notmin.male <- prob.notmin.male / (1 - prob.notmin.male)
odds.ratio.notmin <- odds.notmin.male / odds.min.male
ethnic.odds.lower <- exp(ethnic.logodds.lower)
#[1] 1.138895
ethnic.odds.upper <- exp(ethnic.logodds.upper)
plot_model(model.ethnic, show.values = TRUE,
title = "Odds (Male instructor)", show.p = FALSE)
evals.ethnic <- evals.ethnic %>%
mutate(odds.male = exp(logodds.male))
plogis(mod.ethnic.coef.logodds["(Intercept)", "Estimate"])
plogis(mod.ethnic.coef.logodds["(Intercept)", "Estimate"] +
mod.ethnic.coef.logodds["ethnicitynot minority", "Estimate"])
mod.ethnic.coef.logodds["(Intercept)", "Estimate"] +
mod.ethnic.coef.logodds["ethnicitynot minority", "Estimate"]
mod.ethnic.coef.logodds
plogis(mod.ethnic.coef.logodds["(Intercept)", "Estimate"] +
mod.ethnic.coef.logodds["ethnicitynot minority", "Estimate"])
mod.ethnic.coef.logodds["(Intercept)", "Estimate"]
#概率
#考虑到他们在minority和not minority小组中，一名教师是男性的概率是
?plogis
mod.ethnic.coef.logodds
mod.ethnic.coef.logodds["(Intercept)", "Estimate"]
evals.ethnic <- evals.ethnic %>%
mutate(probs.male = fitted(model.ethnic))
plot_model(model.ethnic, type = "pred", title = "",
axis.title = c("Ethnicity", "Prob. of instructor being male"))
#下载数据（yanny.csv从Moodle的）和适合逻辑回归模型与hear作为二元响应变量，age和gender作为解释变量。你的发现是什么？
setwd("/Users/kurisuuu/Documents/glasgow_stats_2021/semester\ 2/das")
yanny=read.csv("yanna.csv")
yanny=read.csv("yanny.csv")
#下载数据（yanny.csv从Moodle的）和适合逻辑回归模型与hear作为二元响应变量，age和gender作为解释变量。你的发现是什么？
setwd("/Users/kurisuuu/Documents/glasgow_stats_2021/semester\ 2/das")
#下载数据（yanny.csv从Moodle的）和适合逻辑回归模型与hear作为二元响应变量，age和gender作为解释变量。你的发现是什么？
setwd("/Users/kurisuuu/Documents/glasgow_stats_2021/semester\ 2/das/Week\ 9\ Data\ For\ Further\ Tasks")
#下载数据（yanny.csv从Moodle的）和适合逻辑回归模型与hear作为二元响应变量，age和gender作为解释变量。你的发现是什么？
setwd("/Users/kurisuuu/Documents/glasgow_stats_2021/semester\ 2/das/Week\ 9\ Data\ For\ Further\ Tasks-20210706")
yanny=read.csv("yanny.csv")
yanny=yanny%>%
select(hear,gender,age)
yanny$hear=as.factor(yanny$hear)
yanny$gender=as.factor(yanny$gender)
ggplot(data=yanny,aes(x=hear,y=age,fill=hear))+
geom_boxplot()+
labs(x="what do you hear?",y="Age")+
theme(legend.position="none")
#We see in the boxplot that the people who hear Yanny are, on average, younger, however there is some
#overlap in the IQR’s.
yanny%>%tabyl(gender,hear)%>%adorn_percentages()%>%adorn_pct_formatting()%>%adorn_ns()
ggplot(data = yanny, aes(x = hear, group = gender)) +
geom_bar(aes(y = ..prop.., fill = gender), stat = "count", position = "dodge") +
labs(x = "What do you hear?", y = "Proportion")
#There is a slightly smaller proportion of men hearing Yanny, but the proportions are very similar overall.
mod.yanny <- glm(hear ~ age + gender, data = yanny, family = binomial(link = "logit"))
mod.yanny %>%
summary()
#There is a slightly smaller proportion of men hearing Yanny, but the proportions are very similar overall.
mod.yanny <- glm(hear ~ age + gender, data = yanny, family = binomial(link = "logit"))
mod.yanny %>%
summary()
mod.yanny <- glm(hear ~ age, data = yanny, family = binomial(link = "logit"))
mod.yanny %>%
summary()
#Notice that the coefficient of age is negative, suggesting that older people are less likely to hear Yanny.
#However, the coefficient of age is not significant (𝑝-value of 0.16). Still, if we wanted to use the estimated
#coefficient to quantify the effect of age, we would need to look at exp(-0.04812) = 0.953. This suggests that
#for two people who differ by one year in age, the older person’s odds of hearing Yanny are 0.953 times those
#of the younger person. If we want to look at a ten-year age difference then the odds multiplier becomes
#exp(0.04812 * 10) = 1.618. Hence, for two people who differ by 10 years in age, the older person’s odds of
#hearing Yanny are 1.618 times those of the younger person.
plot_model(mod.yanny, show.values = TRUE,
title = "Odds (Age)", show.p = TRUE)
plot_model(mod.yanny, type = "pred", title = "",
axis.title = c("Age", "Probability of hearing Yanny"))
#Download the data (titanic.csv) from Moodle for 𝑛 = 891 passengers aboard the Titanic and fit a logistic
#regression model with survived as the binary response variable, and age, gender, and passenger.class
#as the explanatory variables. What are your findings?
titanic <- read_csv("titanic.csv")
titanic <- titanic %>%
select(survived, age, gender, passenger.class)
titanic$survived <- as.factor(titanic$survived)
levels(titanic$survived) <- c("Died", "Survived")
titanic$gender <- as.factor(titanic$gender)
titanic$passenger.class <- as.factor(titanic$passenger.class)
ggplot(data = titanic, aes(x = survived, y = age, fill = survived)) +
geom_boxplot() +
labs(x = "Survived the Titanic?", y = "Age") +
theme(legend.position = "none")
titanic %>%
tabyl(gender, survived) %>%
adorn_percentages() %>%
adorn_pct_formatting() %>%
adorn_ns() # To show original counts
ggplot(data = titanic, aes(x = survived, group = gender)) +
geom_bar(aes(y = ..prop.., fill = gender), stat = "count", position = "dodge") +
labs(x = "Survived the Titanic?", y = "Proportion")
titanic %>%
tabyl(passenger.class, survived) %>%
adorn_percentages() %>%
adorn_pct_formatting() %>%
adorn_ns() # To show original counts
ggplot(data = titanic, aes(x = survived, group = passenger.class)) +
geom_bar(aes(y = ..prop.., fill = passenger.class),
stat = "count", position = "dodge") +
labs(x = "Survived the Titanic?", y = "Proportion")
plot_model(mod.titanic, show.values = TRUE,
title = "", show.p = FALSE, value.offset = 0.25)
#The largest group of passengers who died were third class passengers, while among those who survived the
#largest group was first class passengers.
mod.titanic <- glm(survived ~ gender + passenger.class + age, data = titanic,
family = binomial(link = "logit"))
mod.titanic %>%
summary()
plot_model(mod.titanic, show.values = TRUE,
title = "", show.p = FALSE, value.offset = 0.25)
install.packages("nimble") ## Install nimble
## nimble is an R package, which can do everything that WinBUGS does
## For further information about nimble, see https://r-nimble.org/
## User manual can be found here: https://r-nimble.org/documentation-2
##
library(nimble)
## Data
x <- c(1.6907, 1.7242, 1.7552, 1.7842, 1.8113, 1.8369, 1.8610, 1.8839)
n <- c(59, 60, 62, 56, 63, 59, 62, 60)
y <- c(6, 13, 18, 28, 52, 53, 61, 60)
N <- length(y)
## Model 1: use the WinBUGS model code directly
code1 <- nimbleCode({
for (j in 1:N) {
y[j] ~ dbin(theta[j], n[j])
logit(theta[j]) <- alpha + beta * x[j]
yhat[j] <- n[j] * theta[j]
}
alpha ~ dnorm(0.0, tau = 1e-6)
beta  ~ dnorm(0.0, tau = 1e-6)
})
## Initial values, data and constants
consts <- list(N = N, x = x, n = n)
inits<- list(alpha = 0, beta = 0)
data <- list(y = y)
## Build nimble model
model1 <- nimbleModel(code = code1, constants = consts, data = data, inits = inits)
## Compile the model
Cmodel1 <- compileNimble(model1)
## Set up to generate posterior samples
monitors1 <- c("alpha", "beta")
