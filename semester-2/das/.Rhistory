aircond <- c(50,44,102,72,22,39,3,15,197,188,79,88,46,5,5,36,22,139,210,97,30,23,13,14)
n <- length(aircond)
thetahat <- 1/mean(aircond)
theta  <- seq(0.005, 0.025, length = 50)
loglik <- n * log(theta) - theta * sum(aircond)
rloglik <- loglik - n * log(thetahat) + thetahat * sum(aircond)
aircond <- c(50,44,102,72,22,39,3,15,197,188,79,88,46,5,5,36,22,139,210,97,30,23,13,14)
n <- length(aircond)
thetahat <- 1/mean(aircond)
theta  <- seq(0.005, 0.025, length = 50)
loglik <- n * log(theta) - theta * sum(aircond)
rloglik <- loglik - n * log(thetahat) + thetahat * sum(aircond)
plot(rloglik~theta)
abline(h=-1.92, lwd=3, col=2)
abline(h=-1.92, lwd=3, col=2)
min(theta[rloglik>=-1.92])
max(theta[rloglik>=-1.92])
min(theta[rloglik>=-1.92])
max(theta[rloglik>=-1.92])
min(theta[rloglik>=-1.92])
max(theta[rloglik>=-1.92])
library(rpanel)
install.packages("rpanel")
rp.likelihood("sum(log(dexp(data,theta)))"),aircond,0.005,0.03)
library(rpanel)
library(rpanel)
install.packages("rpanel")
library(rpanel)
install.packages("BWidget")
library(BWidget)
install.packages("BWidget")
library(rpanel)
library(rpanel)
library(rpanel)
install.packages("rpanel")
library(rpanel)
library(rpanel)
install.packages("BWidgets")
#10
#a
f=function(x,a,b){
(b^a)*(gamma(a))^(-1)*x^(a-1)*exp(-b*x)
}
#b
g=function(x,lambda){
lambda*exp(-lambda*x)
}
gen.gamma.once=function(n,mu,sigma){ #auxiliary function
x=numeric(n)
a=mu^2/sigma^2 #1
b=mu/sigma^2
lambda=b/a #2
x.star=a/b
c=f(x.star,a,b)/g(x.star,lambda) #3
while(TRUE){
y=rexp(1, rate = lambda) #4.1
u=runif(1) #4.2
alpha=f(y,a,b)/(c*g(y,lambda)) #4.3
if(u<alpha) break
}
x=y #4.4
}
for(i in 1:1000){
x[i]=gen.gamma(1000,mu,sigma)
}
gen.gamma=function(n,mu,sigma){ #gen.gamma
for(i in 1:n){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
#d
x=gen.gamma(1000,47,26)
x
gen.gamma.once=function(n,mu,sigma){ #auxiliary function
x=numeric(n)
a=mu^2/sigma^2 #1
b=mu/sigma^2
lambda=b/a #2
x.star=a/b
c=f(x.star,a,b)/g(x.star,lambda) #3
while(TRUE){
y=rexp(1, rate = lambda) #4.1
u=runif(1) #4.2
alpha=f(y,a,b)/(c*g(y,lambda)) #4.3
if(u<alpha) break
}
x=y #4.4
}
gen.gamma=function(n,mu,sigma){ #gen.gamma
for(i in 1:n){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
#d
x=gen.gamma(1000,47,26)
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
for(i in 1:n){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
#d
x=gen.gamma(1000,47,26)
x
#d
x=gen.gamma.once(1000,47,26)
x
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
for(i in 1:n){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
x
x
#d
x=gen.gamma(1000,47,26)
x
#d
x=gen.gamma(1000,47,26)
x
for(i in 1:1000){
x[i]=gen.gamma.once(1000,mu,sigma)
}
for(i in 1:1000){
x[i]=gen.gamma(1000,47,26)
}
x
#d
x=gen.gamma(1000,47,26)
x
#10
#a
f=function(x,a,b){
(b^a)*(gamma(a))^(-1)*x^(a-1)*exp(-b*x)
}
#b
g=function(x,lambda){
lambda*exp(-lambda*x)
}
gen.gamma.once=function(n,mu,sigma){ #auxiliary function
x=numeric(n)
a=mu^2/sigma^2 #1
b=mu/sigma^2
lambda=b/a #2
x.star=a/b
c=f(x.star,a,b)/g(x.star,lambda) #3
while(TRUE){
y=rexp(1, rate = lambda) #4.1
u=runif(1) #4.2
alpha=f(y,a,b)/(c*g(y,lambda)) #4.3
if(u<alpha) break
}
x=y #4.4
}
#d
x=gen.gamma.once(1000,47,26)
for(i in 1:1000){
x[i]=gen.gamma.once(1000,47,26)
}
for(i in 1:1000){
x[i]=gen.gamma.once(1000,47,26)
}
x
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
for(i in 1:n){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
#d
x=gen.gamma(1000,47,26)
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
ntimes=n
for(i in 1:ntimes){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
ntimes=n
for(i in 1:ntimes){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
#d
x=gen.gamma(1000,47,26)
#succeed
for(i in 1:1000){
x[i]=gen.gamma.once(1000,47,26)
}
#or
for(i in 1:1000){
x[i]=gen.gamma.once(1000,47,26)
}
x
hist(x,freq=F)
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
k=n
for(k in 1:k){
x[k]=gen.gamma.once(n,mu,sigma)
}
}
x=gen.gamma(1000,47,26)
View(g)
f=function(x,a,b){
(b^a)*(gamma(a))^(-1)*x^(a-1)*exp(-b*x)
}
#b
g=function(x,lambda){
lambda*exp(-lambda*x)
}
x=numeric(100000)
gen.gamma=function(n,mu,sigma){ #gen.gamma
k=n
for(k in 1:k){
x[k]=gen.gamma.once(n,mu,sigma)
}
}
x=gen.gamma(1000,47,26)
x=numeric(100000)
gen.gamma=function(n,mu,sigma){ #gen.gamma
replicate(n,gen.gamma(n,mu,sigma))
}
x=replicate(100,gen.gamma(n,mu,sigma))
x=replicate(100,gen.gamma(1000,47,26))
x=replicate(3,gen.gamma(1000,47,26))
a
1
A
A=cbind(c(1,1),c(1,-1))
A
install.packages("nycflights13") #Only include if the package hasn't already been installed
1
install.packages("nycflights13") #Only include if the package hasn't already been installed
library(ggplot2)
library(nycflights13)
print("Well done!  You've loaded the libraries")
install.packages("nycflights13") #Only include if the package hasn't already been installed
install.packages("nycflights13") #Only include if the package hasn't already been installed
install.packages("nycflights13") #Only include if the package hasn't already been installed
1
install.packages("nycflights13") #Only include if the package hasn't already been installed
install.packages("nycflights13") #Only include if the package hasn't already been installed
nycflights13
install.packages("nycflights13") #Only include if the package hasn't already been installed
library(ggplot2)
1
library(nycflights13)
install.packages("nycflights13") #Only include if the package hasn't already been installed
install.packages("nycflights13") #Only include if the package hasn't already been installed
#das_lab_1
install.packages("ggplot2") #Only include if the package hasn't already been installed
library(ggplot2)
install.packages("nycflights13") #Only include if the package hasn't already been installed
install.packages("nycflights13") #Only include if the package hasn't already been installed
install.packages("nycflights13") #Only include if the package hasn't already been installed
library(R2OpenBUGS)
model{{
model{{
theta~dunif(0,1)
}
model{
theta~dunif(0,1)
}
model{theta~dunif(0,1)}
#HW2_problem 4
nsamp=100000
theta=rbeta(nsamp,17,5)
mean(theta>0.5&theta<0.7)
mean(theta)
quantile(theta,probs=c(0.025,0.975))  # 95% central posterior
library(ggplot2)
install.packages("nycflights13") #Only include if the package hasn't already been installed
1
library(ggplot2)
install.packages("nycflights13") #Only include if the package hasn't already been installed
print("Well done!  You've loaded the libraries")
install.packages("nycflights13") #Only include if the package hasn't already been installed
library(nycflights13)
library(nycflights13)
install.packages("nycflights13") #Only include if the package hasn't already been installed
library(tidyverse)
# packages containing interesting data
library(nycflights13)
library(fivethirtyeight)
print("Well done!  You've loaded the libraries")
dim(flights) #Returns the dimensions of a dataframe
head(flights) #Returns the first 6 rows of the object
glimpse(flights) #Lists the variables in an object with their first few values
#help(package = "packagename")
help(package = "nycflights13")
glimpse(airports)
setwd("/Users/kurisuuu/Documents/glasgow_stats_2021/semester\ 2/das")
library(readr)
dem_score=read.csv("dem_score.csv")
#2 Modify the code above to create summary_temp to also use the n()
#summary function: summarize(count = n()). What does the returned value correspond to?
weather %>%
summarize(count = n())
#2 Modify the code above to create summary_temp to also use the n()
#summary function: summarize(count = n()). What does the returned value correspond to?
weather %>%
summarize(count = n())
summary_monthly_temp <- weather %>%
group_by(month) %>%
summarize(mean = mean(temp, na.rm = TRUE),
std_dev = sd(temp, na.rm = TRUE))
summary_monthly_temp
View(summary_monthly_temp)
View(summary_monthly_temp)
summary_monthly_temp <- weather %>%
group_by(month) %>%
ungroup() %>%
summarize(mean = mean(temp, na.rm = TRUE),
std_dev = sd(temp, na.rm = TRUE))
summary_monthly_temp
#现在，我们重新访问n()在上一节中介绍的计数汇总功能。例如，假设我们想了解一下纽约市三个机场分别离开了多少个航班：
by_origin=flights%>%
group_by(origin)%>%
summrize(count=n())
by_origin
#现在，我们重新访问n()在上一节中介绍的计数汇总功能。例如，假设我们想了解一下纽约市三个机场分别离开了多少个航班：
by_origin <- flights %>%
group_by(origin) %>%
summarize(count = n())
by_origin
#Grouping by more than one variable
#You are not limited to grouping by one variable! Say you wanted to know the number of flights leaving each of the three New York City airports for each month, we can also group by a second variable month: group_by(origin, month).
by_origin_monthly <- flights %>%
group_by(origin,month) %>%
summarize(count = n())
by_origin_monthly
#We see there are 36 rows to by_origin_monthly because there are 12 months times 3 airports (EWR, JFK, and LGA). Let’s now pose two questions. First, what if we reverse the order of the grouping i.e. we group_by(month, origin)?
by_monthly_origin <- flights %>%
group_by(month, origin) %>%
summarize(count = n())
by_monthly_origin
#We can plot the gross revenue against the budget to explore the relationship between the two variables.
b.plot=ggplot(data=bollywood,aes(y=Gross,x=Budget))+
geom_point(col="#66a61e")+
scale_x_continuous("Budget (crore)") + scale_y_continuous("Gross (crore)")
#APM_week_1
bollywood <-
read.csv(url("http://www.stats.gla.ac.uk/~tereza/rp/bollywood_boxoffice.csv"))
head(bollywood)
#We can plot the gross revenue against the budget to explore the relationship between the two variables.
b.plot=ggplot(data=bollywood,aes(y=Gross,x=Budget))+
geom_point(col="#66a61e")+
scale_x_continuous("Budget (crore)") + scale_y_continuous("Gross (crore)")
#We can plot the gross revenue against the budget to explore the relationship between the two variables.
b.plot <- ggplot(data = bollywood, aes(y = Gross, x = Budget)) +
geom_point(col = "#66a61e") +
scale_x_continuous("Budget (crore)") + scale_y_continuous("Gross (crore)")
b.plot.l <- ggplot(data = bollywood, aes(y = log10(Gross), x = log10(Budget))) +
geom_point(col = "#1b9e77") +
scale_x_continuous("log(Budget) (crore)") +
scale_y_continuous("log(Gross) (crore)")
plot(1,2)
b.plot.l <- ggplot(data = bollywood, aes(y = log10(Gross), x = log10(Budget))) +
geom_point(col = "#1b9e77") +
scale_x_continuous("log(Budget) (crore)") +
scale_y_continuous("log(Gross) (crore)")
#APM_week_1
?ggplot
bollywood <-
read.csv(url("http://www.stats.gla.ac.uk/~tereza/rp/bollywood_boxoffice.csv"))
head(bollywood)
#We can plot the gross revenue against the budget to explore the relationship between the two variables.
b.plot <- ggplot(data = bollywood, aes(y = Gross, x = Budget)) +
geom_point(col = "#66a61e") +
scale_x_continuous("Budget (crore)") + scale_y_continuous("Gross (crore)")
#We can plot the gross revenue against the budget to explore the relationship between the two variables.
b.plot <- ggplot(data = bollywood, aes(y = Gross, x = Budget)) +
geom_point(col = "#66a61e") +
scale_x_continuous("Budget (crore)") + scale_y_continuous("Gross (crore)")
1
