apply(iris[,1:4],2,cv)
#or
apply(iris[,1:4],2,function(x) sd(x)/mean(x))
#Example 6
N=rbind(c(392,598,230),c(484,139,177))
colnames(N) <- c("Obama","Romney", "No preference")
rownames(N) <- c("caucasian", "other")
Ni=apply(N,1,sum) #row totals
Nj=apply(N,2,sum) #column totals
total=sum(N)      #overall total
Ni=apply(N,1,sum) #row totals
total=sum(N)      #overall total
Nj
total
E=Ni%*%t(Nj)/total #expected counts
total=sum(N)
total
E=Ni%*%t(Nj)/total #expected counts
Ni
Nj=apply(N,2,sum) #column totals
Nj
E=Ni%*%t(Nj)/total #expected counts
statstic=sum((N-E)^2/E)
#Example 7
#Suppose we want to centre the first four columns of the iris dataset by subtracting their means. We can do
#this using a loop
iris.means=apply(iris[,1:4],2,mean)
iris.zeromean=iris[,1:4]
for(i in 1:4)
#However, we can avoid the loop by using the function sweep:
iris.means=apply(iris[,1:4],2,mean)
iris.zeromean=sweep(iris[,1:4],2,iris.means,"-")
iris.zeromean=sweep(iris[,1:4],2,iris.means,"-")
#However, we can avoid the loop by using the function sweep:
iris.means=apply(iris[,1:4],2,mean)
iris.zeromean=sweep(iris[,1:4],2,iris.means,"-")
#The general syntax of the function sweep is
#sweep(X, MARGIN, STATS, FUN, ..
sweep(iris[,1:4],1,iris.means,"-")
#The general syntax of the function sweep is
#sweep(X, MARGIN, STATS, FUN, ..
sweep(iris[,1:4],1,iris.means,"-")
#The general syntax of the function sweep is
#sweep(X, MARGIN, STATS, FUN, ..
sweep(iris[,1:4],1,iris.means,"-")
#Example 7
#Suppose we want to centre the first four columns of the iris dataset by subtracting their means. We can do
#this using a loop
iris.means=apply(iris[,1:4],2,mean)
iris.zeromean=iris[,1:4]
for(i in 1:4)
iris.zeromean[,i]=iris.zeromean[,i]-iris.means[i]
#Example 7
#Suppose we want to centre the first four columns of the iris dataset by subtracting their means. We can do
#this using a loop
iris.means=apply(iris[,1:4],2,mean)
iris.zeromean=iris[,1:4]
for(i in 1:4)
iris.zeromean[,i]=iris.zeromean[,i]-iris.means[i]
#However, we can avoid the loop by using the function sweep:
iris.means=apply(iris[,1:4],2,mean)
iris.zeromean=sweep(iris[,1:4],2,iris.means,"-")
#The general syntax of the function sweep is
#sweep(X, MARGIN, STATS, FUN, ..
sweep(iris[,1:4], iris.means, 1, "-")
#Scaling and Centering of Matrix-like Objects
scale(iris[,1:4],center=T,scale=F)
#The function by
#Suppose you want to compute the average values of the four measurements for the three different species in
#the iris data set.
colMeans(iris[iris$Species=="setosa",1:4])
#The function by
#Suppose you want to compute the average values of the four measurements for the three different species in
#the iris data set.
colMeans(iris[iris$Species=="setosa",1:4])
colMeans(iris[iris$Species=="versicolor",1:4])
#The function by
#Suppose you want to compute the average values of the four measurements for the three different species in
#the iris data set.
colMeans(iris[iris$Species=="setosa",1:4])
colMeans(iris[iris$Species=="versicolor",1:4])
colMeans(iris[iris$Species=="virginica",1:4])
#Suppose you want to compute the average values of the four measurements for the three different species in
#the iris data set.
for (species in levels(iris$Species))
#The function by
#Suppose you want to compute the average values of the four measurements for the three different species in
#the iris data set.
head(iris)
#The function by
#Suppose you want to compute the average values of the four measurements for the three different species in
#the iris data set.
head(iris)
colMeans(iris[iris$Species=="setosa",1:4])
colMeans(iris[iris$Species=="versicolor",1:4])
colMeans(iris[iris$Species=="virginica",1:4])
#or
by(iris[,1:4],iris$Species,colMeans)
#Example 9
do.regression=function(x){
lm(Petal.Length~Sepal.Length,data=x)
}
#Example 9
do.regression=function(x){
lm(Petal.Length~Sepal.Length,data=x)
}
#Example 9
#The code below computes separate regressions of the petal length against the
#sepal length for each species
do.regression=function(x){
lm(Petal.Length~Sepal.Length,data=x)
}
by(iris,iris$Species,do.regression)
# STEP 2.1
# Compute the logit-transform
# Arguments: theta (proportion)
# Returns: phi=logit(theta)
logit.transform=function(theta){
log(theta/(1-theta))
}
# STEP 2.1
# Compute the logit-transform
# Arguments: theta (proportion)
# Returns: phi=logit(theta)
logit.transform=function(theta){
log(theta/(1-theta))
}
# STEP 2.1
# Compute the logit-transform
# Arguments: theta (proportion)
# Returns: phi=logit(theta)
logit.transform=function(theta){
log(theta/(1-theta))
}
# STEP 3
# Compute the inverse logit-transform
# Arguments: phi (log-odds)
# Returns: theta=inverse logit(phi)
inverse.logit.transform=function(phi){
exp(phi)/(1+exp(phi))
}
# STEP 2.1
# Compute the logit-transform
# Arguments: theta (proportion)
# Returns: phi=logit(theta)
logit.transform=function(theta){
log(theta/(1-theta))
}
# STEP 3
# Compute the inverse logit-transform
# Arguments: phi (log-odds)
# Returns: theta=inverse logit(phi)
inverse.logit.transform=function(phi){
exp(phi)/(1+exp(phi))
}
#Finally we will write the main function to compute the induced confidence interval for proportions:
# Compute the induced asymptotic confidence interval for a proportion
# Arguments: x (observed number of "successes"), n (sample size), alpha (1-significance level)
# Returns: vector of length 2 containing the lower and upper bound of the CI
ci.proportion.induced=function(x,n,alpha=0.05){
theta=x/n
ci.phi=ci.logodds(theta,n,alpha)
ci.theta=inverse.logit.transform(ci,phi)
ci.theta
}
#Debugging
#warnings
x=log(-1:1)
#Debugging
#warnings
x=log(-1:1)
## Warning in log(-1:1): NaNs produced
x
## [1] NaN -Inf 0
x <- 1:3
y <- 4:5
z <- x+y
## Warning in x + y: longer object length is not a multiple of shorter object
## length
z
#Errors:
#• syntax errors like mismatched parenthesis,
sin(x[i)]
#Errors:
#• syntax errors like mismatched parenthesis,
sin(x[i)]
#Errors:
#• syntax errors like mismatched parenthesis,
sin(x[i)]
#Errors:
#• syntax errors like mismatched parenthesis,
sin(x[i)]
#Errors:
#• syntax errors like mismatched parenthesis,
sin(x[i)]
#Using warning and stop in your code
# Compute an asymptotic confidence interval for the log-odds
## (with error handling)
# Arguments:
## theta (observed proportion),
## n (sample size)
## alpha (1-significance level)
# Returns: vector of length 2 containing the lower and
## upper bound of the CI
ci.logodds=function(theta,n,alpha=0.05){
if((theta==0)|(theta==1))
stop("Propotion theta cannot be 0 or 1")
phi=logit.transform(tehta)
sd.phi=sqrt(1/(n*theta)+1/(n*(1-theta)))
ci=phi+c(-1,1)*qnorm(1-alpha/2)*sd.phi
names(ci)=c("lower","upper")
ci
}
# Compute the induced asymptotic confidence interval
## for a proportion (now checking n*theta)
# Arguments:
## x (observed number of "successes") or theta (proportion of "successess",
## n (sample size)
## alpha (1-significance level)
# Returns: vector of length 2 containing the lower
## and upper bound of the CI
ci.proportion.induced <- function(x, theta=x/n, n, alpha=0.05) {
if (abs(n*theta-round(n*theta))>1e-10) # Warn the user if n*theta is not an integer
warning("n*theta is not a an integer. Check observed proportion theta and sample size n.")
ci.phi <- ci.logodds(theta, n, alpha) # Get CI for log-odds
ci.theta <- inverse.logit.transform(ci.phi) # Transform back to theta-domain
ci.theta
}
#example 1 MLE
loglik=function(theta,x){
-sum(x)+(theta-1)*sum(log(x))-length(x)*lgamma(theta)
}
loglik.d=function(theta,x){
sum(log(x))-length(x)*digamma(theta)
}
loglik.dd=function(theta,x){
-length(x)*trigamma(theta)
}
x=rexp(1e3)
#example 1 MLE
loglik=function(theta,x){
-sum(x)+(theta-1)*sum(log(x))-length(x)*lgamma(theta)
}
loglik.d=function(theta,x){
sum(log(x))-length(x)*digamma(theta)
}
loglik.dd=function(theta,x){
-length(x)*trigamma(theta)
}
x=rexp(1e3)
theta.range=1:500/100
plot(theta.range,loglik(theta.range,x),type="l",lwd=2,
xlab=expression(theta), ylab=expression(loglik(theta)))
#newton's method
theta=1.5
for(h in 1:100){
theta=theta-loglik.d(theta,x)/loglik.dd(theta,x)
}
x=rexp(1e3)
theta.range=1:500/100
plot(theta.range,loglik(theta.range,x),type="l",lwd=2,
xlab=expression(theta), ylab=expression(loglik(theta)))
#newton's method
theta=1.5
for(h in 1:100){
theta=theta-loglik.d(theta,x)/loglik.dd(theta,x)
}
theta
#The above example carries out a fixed number of iterations. It would be better to check convergence at every
#iteration and abort if the change in θ is small enough.
theta=1.5
for(h in 1:100){
old.theta=theta
theta=theta-loglik.d(theta,x)/loglik.dd(theta,x)
if(abs(theta-old.theta)<1e-10)
break
}
f=function(theta){
exp(-2*theta)-2
}
f=function(theta){
exp(-2*theta)-2
}
f.d=function(theta){
-2*exp(-2*theta)
}
#In its simplest form Newton’s method can now be implemented as follows:
theta=0
for(h in 1:20){
theta=theta-f(theta)/f.d(theta)
}
#uniroot(f,interval=c(from....to),...)
uniroot(f,c(-1,1))
#uniroot(f,interval=c(from....to),...)
uniroot(f,c(-1,1))
rosenbrock=function(theta,trace=F){
if(trace)
points(t(theta))
100*(theta[2]-theta[1]^2)^2+(1-theta[1])^2
}
rosenbrock.gradient <- function(theta, ...) {
c(-400*theta[1]*(theta[2]-theta[1]^2) - 2*(1-theta[1]), 200*(theta[2]-theta[1]^2))
}
theta1=seq(-1.5,1.5,length.out=100)
theta2=seq(-1.5,1.5,length.out=100)
val=matrix(nrow=length(theta1),ncol=length(theta2))
for(i in seq_along(theta1))   # Evaluate function on grid
for(j in seq_along(theta2))
val[i,j]=rosenbrock(c(theta1[i],theta2[j]))
image(theta1,theta2,val,col=topo.colors(128)) # Draw image
sol=optim(c(0,0),fn=rosenbrock,gr=rosenbrock.gradient,
method="BFGS",trace=T)
sol
rosenbrock.gradient <- function(theta) {
c(-400*theta[1]*(theta[2]-theta[1]^2) - 2*(1-theta[1]), 200*(theta[2]-theta[1]^2))
}
sol=optim(c(0,0),fn=rosenbrock,gr=rosenbrock.gradient,
method="BFGS",trace=T)
sol=optim(c(0,0),fn=rosenbrock,gr=rosenbrock.gradient,
method="BFGS",trace=T)
rosenbrock.gradient <- function(theta, ...) {
c(-400*theta[1]*(theta[2]-theta[1]^2) - 2*(1-theta[1]), 200*(theta[2]-theta[1]^2))
}
sol=optim(c(0,0),fn=rosenbrock,gr=rosenbrock.gradient,
method="BFGS",trace=T)
sol
points(sol$par[1],sol$par[2],cex=2,pch=3,col="white") # Mark minimum found (should be (1,1))
points(sol$par[1],sol$par[2],cex=2,pch=3,col="white") # Mark minimum found (should be (1,1))
#example 6
integrate(function(x) dexp(x,rate=2)*x,lower=0,upper=+Inf)
#example 6
integrate(function(x) dexp(x,rate=2)*x,lower=0,upper=+Inf)
r的第二题是怎么删list里面的列的?
a=datafram(c(1,1),c(1,1))
r的第二题是怎么删list里面的列的?
a=data.frame(c(1,1),c(1,1))
r的第二题是怎么删list里面的列的?
a=data.frame(c(1,1),c(1,1))
data.frame
r的第二题是怎么删list里面的列的?
a=data.frame(c(1,1),c(1,1))
a=c(2,5,1,4,4,3,2,5,2,3)
r的第二题是怎么删list里面的列的?
a=data.frame(a,a)
a=data.frame(a,a)
a
subset(a,a$a.1)
a$a.1
a
typeof(a)
r的第二题是怎么删list里面的列的?
myList <- list(A = data.frame(ID = c("A", "A"),
Test = c(1, 1),
Value = 1:2),
B = data.frame(ID = c("B", "B", "B"),
Test = c(1, 3, 5),
Value = 1:3))
r的第二题是怎么删list里面的列的?
myList <- list(A = data.frame(ID = c("A", "A"),
Test = c(1, 1),
Value = 1:2),
B = data.frame(ID = c("B", "B", "B"),
Test = c(1, 3, 5),
Value = 1:3))
#r的第二题是怎么删list里面的列的?
myList <- list(A = data.frame(ID = c("A", "A"),
Test = c(1, 1),
Value = 1:2),
B = data.frame(ID = c("B", "B", "B"),
Test = c(1, 3, 5),
Value = 1:3))
# Keep just the "ID" and "Value" columns
lapply(myList, function(x) x[(names(x) %in% c("ID", "Value"))])
myList
# Keep just the "ID" and "Value" columns
lapply(myList, function(x) x[(names(x) %in% c("ID", "Value"))])
# Drop the "ID" and "Value" columns
lapply(myList, function(x) x[!(names(x) %in% c("ID", "Value"))])
#r的第二题是怎么删list里面的列的?
myList <- list(A = data.frame(ID = c("A", "A"),
Test = c(1, 1),
Value = 1:2),
B = data.frame(ID = c("B", "B", "B"),
Test = c(1, 3, 5),
Value = 1:3))
#or
lapply(myList, function(x) { x["ID"] = NULL; x })
#Task 6
#Write a function box.muller, which takes no arguments,
#and which returns a pair of numbers (z1, z2) calculated as follows:
box.muller=function(){
c=runif(2)
theta=2*pi*c[1]
r=sqrt(-2*log(c[2]))
z1=r*sin(theta)
z2=r*cos(theta)
return(c(z1,z2))
}
box.muller()
unique.areas <- levels(ices.areas$area) # Find the different areas
#(g) The data frame ices.areas contains for each subdivision the name of the (larger) area it is part of. For
#each area compute the species that is most abundant.
View(ices)
"/Users/kurisuuu/Documents/glasgow_stats_2021/introtoR/labs"
load(url("http://www.stats.gla.ac.uk/~rhaggarty/rp/p7_2020.RData"))
#(g) The data frame ices.areas contains for each subdivision the name of the (larger) area it is part of. For
#each area compute the species that is most abundant.
View(ices)
unique.areas <- levels(ices.areas$area) # Find the different areas
ices.by.area <- matrix(ncol=ncol(ices), nrow=length(unique.areas))
rownames(ices.by.area) <- unique.areas # Create matrix to store result and set up col/row names
colnames(ices.by.area) <- colnames(ices)
for (i in unique.areas) { # For each area ... 选中文字
subdivisions <- subset(ices.areas, area==i)$subdivision #起手一个subset来选中的想要的数据
subset <- subset(ices, rownames(ices)%in%subdivisions) # Extract observations ...
ices.by.area[i,] <- apply(subset,2,sum) # ... and add them up.
# We need drop=FALSE as we might only select one row
}
for (i in unique.areas) { # For each area ... 选中文字
subdivisions <- subset(ices.areas, area==i)$subdivision #起手一个subset来选中的想要的数据
subset <- subset(ices, rownames(ices)%in%subdivisions) # Extract observations ...
ices.by.area[i,] <- apply(subset,2,sum) # ... and add them up.
# We need drop=FALSE as we might only select one row
}
unique.areas <- levels(ices.areas$area) # Find the different areas
ices.by.area <- matrix(ncol=ncol(ices), nrow=length(unique.areas))
rownames(ices.by.area) <- unique.areas # Create matrix to store result and set up col/row names
colnames(ices.by.area) <- colnames(ices)
ices
#(g) The data frame ices.areas contains for each subdivision the name of the (larger) area it is part of. For
#each area compute the species that is most abundant.
View(ices)
#example
i=unique.areas[1]
subdivisions <- subset(ices.areas, area==i)$subdivision #起手一个subset来选中的想要的数据
subdivisions
subset(ices, rownames(ices)%in%subdivisions)
subset
subset[,1:5]
#example
i=unique.areas[1]
subdivisions <- subset(ices.areas, area==i)$subdivision #起手一个subset来选中的想要的数据
subset <- subset(ices, rownames(ices)%in%subdivisions)# Extract observations ...
subset[,1:5]
ices.by.area[i,] <- apply(subset,2,sum) # ... and add them up.
ices.by.area
ices.by.area[i,]
?%in%
?%in%
?match
x%in%y
x=c(1,2,3,4)
y=c(1,3)
x%in%y
match(x,y)
x=c(1,2,3,4)
y=c(1,3)
x%in%y
match(x,y)
df=data.frame(x1=c(1,NA,3,4),y1=c("cat","dog","bird",NA))
df[!is.na(df$x1),]
df[!is.na(df$x1),]
df[!is.na(df$x1),]
na.omit(df)
#We can use  df[!is.na(df$x1),]  or na.omit(df) to delete rows with missing values,
#and how to delete columns with missing value?  t(na.omit(t(df))) or other ways?
df=data.frame(x1=c(1,NA,3,4),y1=c("cat","dog","bird",NA))
df
df[!is.na(df$x1),]
#We can use  df[!is.na(df$x1),]  or na.omit(df) to delete rows with missing values,
#and how to delete columns with missing value?  t(na.omit(t(df))) or other ways?
df=data.frame(x1=c(1,NA,3,4),y1=c("cat","dog","bird",NA))
df
df[!is.na(df$x1),]
#We can use  df[!is.na(df$x1),]  or na.omit(df) to delete rows with missing values,
#and how to delete columns with missing value?  t(na.omit(t(df))) or other ways?
df=data.frame(x1=c(1,NA,3,4),y1=c("cat","dog","bird",NA))
#check missing value by column
apply(df,2,is.na)
#check missing value by column
apply(df,2,function(x) is.na(x))
#check missing value by column
apply(df,2,function(x) any(is.na(x)))
#We can use  df[!is.na(df$x1),]  or na.omit(df) to delete rows with missing values,
#and how to delete columns with missing value?  t(na.omit(t(df))) or other ways?
df=data.frame(x1=c(1,NA,3,4),y1=c("cat","dog","bird"))
#We can use  df[!is.na(df$x1),]  or na.omit(df) to delete rows with missing values,
#and how to delete columns with missing value?  t(na.omit(t(df))) or other ways?
df=data.frame(x1=c(1,NA,3,4),y1=c("cat","dog","bird")
#check missing value by column
apply(df,2,function(x) any(is.na(x)))
#We can use  df[!is.na(df$x1),]  or na.omit(df) to delete rows with missing values,
#and how to delete columns with missing value?  t(na.omit(t(df))) or other ways?
df=data.frame(x1=c(1,NA,3,4),y1=c("cat","dog","bird"))
#We can use  df[!is.na(df$x1),]  or na.omit(df) to delete rows with missing values,
#and how to delete columns with missing value?  t(na.omit(t(df))) or other ways?
df=data.frame(x1=c(1,NA,3,4),y1=c("cat","dog","bird","chicken"))
#check missing value by column
apply(df,2,function(x) any(is.na(x)))
#check missing value by column
?any
apply(df,2,function(x) is.na(x))
apply(df,2,function(x) any(is.na(x)))
df=df[,-idx]
idx=apply(df,2,function(x) any(is.na(x)))
df=df[,-idx]
df
head(cars)
cars[order(cars$dist),]
order(cars$dist)
cars[order(cars$dist),]
qf(0.95,3,16)
