library(BWidget)
install.packages("BWidget")
library(rpanel)
library(rpanel)
library(rpanel)
install.packages("rpanel")
library(rpanel)
library(rpanel)
install.packages("BWidgets")
#10
#a
f=function(x,a,b){
(b^a)*(gamma(a))^(-1)*x^(a-1)*exp(-b*x)
}
#b
g=function(x,lambda){
lambda*exp(-lambda*x)
}
gen.gamma.once=function(n,mu,sigma){ #auxiliary function
x=numeric(n)
a=mu^2/sigma^2 #1
b=mu/sigma^2
lambda=b/a #2
x.star=a/b
c=f(x.star,a,b)/g(x.star,lambda) #3
while(TRUE){
y=rexp(1, rate = lambda) #4.1
u=runif(1) #4.2
alpha=f(y,a,b)/(c*g(y,lambda)) #4.3
if(u<alpha) break
}
x=y #4.4
}
for(i in 1:1000){
x[i]=gen.gamma(1000,mu,sigma)
}
gen.gamma=function(n,mu,sigma){ #gen.gamma
for(i in 1:n){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
#d
x=gen.gamma(1000,47,26)
x
gen.gamma.once=function(n,mu,sigma){ #auxiliary function
x=numeric(n)
a=mu^2/sigma^2 #1
b=mu/sigma^2
lambda=b/a #2
x.star=a/b
c=f(x.star,a,b)/g(x.star,lambda) #3
while(TRUE){
y=rexp(1, rate = lambda) #4.1
u=runif(1) #4.2
alpha=f(y,a,b)/(c*g(y,lambda)) #4.3
if(u<alpha) break
}
x=y #4.4
}
gen.gamma=function(n,mu,sigma){ #gen.gamma
for(i in 1:n){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
#d
x=gen.gamma(1000,47,26)
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
for(i in 1:n){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
#d
x=gen.gamma(1000,47,26)
x
#d
x=gen.gamma.once(1000,47,26)
x
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
for(i in 1:n){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
x
x
#d
x=gen.gamma(1000,47,26)
x
#d
x=gen.gamma(1000,47,26)
x
for(i in 1:1000){
x[i]=gen.gamma.once(1000,mu,sigma)
}
for(i in 1:1000){
x[i]=gen.gamma(1000,47,26)
}
x
#d
x=gen.gamma(1000,47,26)
x
#10
#a
f=function(x,a,b){
(b^a)*(gamma(a))^(-1)*x^(a-1)*exp(-b*x)
}
#b
g=function(x,lambda){
lambda*exp(-lambda*x)
}
gen.gamma.once=function(n,mu,sigma){ #auxiliary function
x=numeric(n)
a=mu^2/sigma^2 #1
b=mu/sigma^2
lambda=b/a #2
x.star=a/b
c=f(x.star,a,b)/g(x.star,lambda) #3
while(TRUE){
y=rexp(1, rate = lambda) #4.1
u=runif(1) #4.2
alpha=f(y,a,b)/(c*g(y,lambda)) #4.3
if(u<alpha) break
}
x=y #4.4
}
#d
x=gen.gamma.once(1000,47,26)
for(i in 1:1000){
x[i]=gen.gamma.once(1000,47,26)
}
for(i in 1:1000){
x[i]=gen.gamma.once(1000,47,26)
}
x
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
for(i in 1:n){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
#d
x=gen.gamma(1000,47,26)
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
ntimes=n
for(i in 1:ntimes){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
ntimes=n
for(i in 1:ntimes){
x[i]=gen.gamma.once(n,mu,sigma)
}
}
#d
x=gen.gamma(1000,47,26)
#succeed
for(i in 1:1000){
x[i]=gen.gamma.once(1000,47,26)
}
#or
for(i in 1:1000){
x[i]=gen.gamma.once(1000,47,26)
}
x
hist(x,freq=F)
gen.gamma=function(n,mu,sigma){ #gen.gamma
x=numeric(n)
k=n
for(k in 1:k){
x[k]=gen.gamma.once(n,mu,sigma)
}
}
x=gen.gamma(1000,47,26)
View(g)
f=function(x,a,b){
(b^a)*(gamma(a))^(-1)*x^(a-1)*exp(-b*x)
}
#b
g=function(x,lambda){
lambda*exp(-lambda*x)
}
x=numeric(100000)
gen.gamma=function(n,mu,sigma){ #gen.gamma
k=n
for(k in 1:k){
x[k]=gen.gamma.once(n,mu,sigma)
}
}
x=gen.gamma(1000,47,26)
x=numeric(100000)
gen.gamma=function(n,mu,sigma){ #gen.gamma
replicate(n,gen.gamma(n,mu,sigma))
}
x=replicate(100,gen.gamma(n,mu,sigma))
x=replicate(100,gen.gamma(1000,47,26))
x=replicate(3,gen.gamma(1000,47,26))
#example 1
loglik=function(theta,x){
-sum(x)+(theta-1)*sum(log(x))-length(x)*lgamma(theta)
}
loglik.d=function(theta,x){
sum(log(x))-length(x)*digamma(theta)
}
loglik.dd=function(theta,x){
-length(x)*trigamma(theta)
}
x=rexp(1e3)
theta.range=1:500/100
plot(theta.range,loglik(theta.range,x),type="l",lwd=2,
xlab=expression(theta), ylab=expression(loglik(theta)))
#newton's method
theta=1.5
for(h in 1:100){
theta=theta-loglik.d(theta,x)/loglik.dd(theta,x)
}
theta
#newton's method
theta=1.5
for(h in 1:100){
theta=theta-loglik.d(theta,x)/loglik.dd(theta,x)
}
theta
#example 1 MLE
loglik <- function(theta, x) {
-sum(x) + (theta-1)*sum(log(x)) - length(x) * lgamma(theta)
}
loglik.d <- function(theta, x) {
sum(log(x)) - length(x) * digamma(theta)
}
loglik.dd <- function(theta, x) {
-length(x) * trigamma(theta)
}
x=rexp(1e3)
theta.range=1:500/100
plot(theta.range,loglik(theta.range,x),type="l",lwd=2,
xlab=expression(theta), ylab=expression(loglik(theta)))
#newton's method
theta=1.5
for(h in 1:100){
theta=theta-loglik.d(theta,x)/loglik.dd(theta,x)
}
theta
#The above example carries out a fixed number of iterations. It would be better to check convergence at every
#iteration and abort if the change in θ is small enough.
theta=1.5
for(h in 1:100){
old.theta=theta
theta=theta-loglik.d(theta,x)/loglik.dd(theta,x)
if(abs(theta-old.theta)<1e-10)
break
}
theta
#uniroot(f,interval=c(from....to),...)
uniroot(f,c(-1,1))
#uniroot(f,interval=c(from....to),...)
uniroot(f,c(-1,1))
#uniroot(f,interval=c(from....to),...)
uniroot(f,c(-1,1))
f=function(theta){
exp(-2*theta)-2
}
f.d=function(theta){
-2*exp(-2*theta)
}
#uniroot(f,interval=c(from....to),...)
uniroot(f,c(-1,1))
for(h in 1:20){
theta=theta-f(theta)/f.d(theta)
}
theta
#uniroot(f,interval=c(from....to),...)
uniroot(f,c(-1,1))
#example 4
#ro
#example 4
rosenbrock=function(theta,trace=False){
if(trace)
points(t(theta))
100*(theta[2]-theta[1]^2)^2+(1-theta[1])^2
}
rosenbrock.gradient=function(theta,...){
rosenbrock.gradient=function(theta,...){
rosenbrock.gradient=function(theta,...){
theta1=seq(-1.5,1.5,length.out=100)
theta2=seq(-1.5,1.5,length.out=100)
theta1=seq(-1.5,1.5,length.out=100)
theta2=seq(-1.5,1.5,length.out=100)
val=matrix(nrow=length(theta1),ncol=length(theta2))
for(i in seq_along(theta1))   # Evaluate function on grid
for(j in seq_along(theta2))
val[i,j]=rosenbrock(c(theta1[i],theta2[j]))
image(theta1,theta2,val,col=topo.colors(128)) # Draw image
sol=optim(c(0,0),fn=rosenbrock,gr=rosenbrock.gradient,
methods="BFGS",trace=T)
sol
rosenbrock=function(theta,trace=False){
if(trace)
points(t(theta))
100*(theta[2]-theta[1]^2)^2+(1-theta[1])^2
}
rosenbrock.gradient <- function(theta, ...) {
c(-400*theta[1]*(theta[2]-theta[1]^2) - 2*(1-theta[1]), 200*(theta[2]-theta[1]^2))
}
theta1=seq(-1.5,1.5,length.out=100)
theta2=seq(-1.5,1.5,length.out=100)
val=matrix(nrow=length(theta1),ncol=length(theta2))
for(i in seq_along(theta1))   # Evaluate function on grid
for(j in seq_along(theta2))
val[i,j]=rosenbrock(c(theta1[i],theta2[j]))
rosenbrock=function(theta,trace=F){
if(trace)
points(t(theta))
100*(theta[2]-theta[1]^2)^2+(1-theta[1])^2
}
rosenbrock.gradient <- function(theta, ...) {
c(-400*theta[1]*(theta[2]-theta[1]^2) - 2*(1-theta[1]), 200*(theta[2]-theta[1]^2))
}
theta1=seq(-1.5,1.5,length.out=100)
theta2=seq(-1.5,1.5,length.out=100)
val=matrix(nrow=length(theta1),ncol=length(theta2))
for(i in seq_along(theta1))   # Evaluate function on grid
for(j in seq_along(theta2))
val[i,j]=rosenbrock(c(theta1[i],theta2[j]))
image(theta1,theta2,val,col=topo.colors(128)) # Draw image
sol=optim(c(0,0),fn=rosenbrock,gr=rosenbrock.gradient,
methods="BFGS",trace=T)
sol=optim(c(0,0),fn=rosenbrock,gr=rosenbrock.gradient,
method="BFGS",trace=T)
sol
sol=optim(c(0,0),fn=rosenbrock,gr=rosenbrock.gradient,
method="BFGS",trace=T)
sol
points(sol$par[1],sol$par[2],cex=2,pch=3,col="white")
#example 6
integrate(function(x) dexp(x,rate=2)*x,lower=0,upper=+Inf)
compute.variance(20,30)
compute.variance(c(20,30))
#task 1
#(a) The code below (supposedly) computes the variance of x. Find the mistakes in the following code.
compute.variance <- function(x) {
x.bar <- mean(x)
n <- length(x)
variance <- sum(x-x.bar)^2 / n-1
variance
}
compute.variance(c(20,30))
compute.variance(c(20,30,40))
#task 1
#(a) The code below (supposedly) computes the variance of x. Find the mistakes in the following code.
compute.variance <- function(x) {
x.bar <- mean(x)
n <- length(x)
variance <- sum(x-x.bar)^2 / (n-1)
variance
}
compute.variance(c(20,30,40))
compute.variance(c(20,30,40))
x.bar <- mean(x)
n <- length(x)
variance <- sum((x-x.bar)^2) / (n-1)
variance
#task 1
#(a) The code below (supposedly) computes the variance of x. Find the mistakes in the following code.
compute.variance <- function(x) {
x.bar <- mean(x)
n <- length(x)
variance <- sum((x-x.bar)^2) / (n-1)
variance
}
compute.variance(c(20,30,40))
compute.variance(c(20,300,40))
compute.variance(c(20,30,40))
my.function(300)
#(b) Consider the function What does the function my.function do?
my.function <- function(z) {
m <- Inf
for (i in 1:length(z))
if (z[i]<m)
m <- z[i]
m
}
my.function(300)
my.function(c(300,20))
my.function(c(300,20,40))
my.function(c(300,20,2,40))
#task 2
least.squares=function(y,X){
y.hat=solve(t(X)%*%X,t(X)%*%y)
}
least.squares=function(y,X){
if(length(y)!=nrow(X)|ncol(X)>nrow(X)) stop("Error")
y.hat=solve(t(X)%*%X,t(X)%*%y)
}
#task 4
#(a) Write a function z.transform that takes r as its only argument and which returns ζ(r). Your function
#should return an error message if r 6∈ (−1, 1).
z.transform=function(r){
if(r<-1|r>-1) return("r scope error")
0.5*log((1+r)/(1-r))
}
#(b) Write a function inverse.z.transform that takes z as its only argument and that returns ζ −1(z).
inverse.z.transform=function(z){
(exp(2*z)-1)*(exp(2*z)+1)^-1
}
rnorm(430)
dnorm(0.95)
dnorm(0.975)
qnorm(0.975)
#(c) Write a function cor.ci which takes the observed correlation ρˆ, n, and α as arguments and that returns
#the asymptotic (1 − α)-confidence interval for ρ. The default value of α should be 5%. Hint: You will need to
#call the functions z.transform and inverse.z.transform you defined in parts (a) and (b).
cor.ci=function(r.hat,n,alpha=0.05){
x1=inverse.z.transform(z.transform(r.hat)-qnorm(1-alpha/2)/sqrt(n-3))
x2=inverse.z.transform(z.transform(r.hat)+qnorm(1-alpha/2)/sqrt(n-3))
c(x1,x2)
}
#(e) In this part you will use the mammals data from the library MASS.
#Use your function compute.cor.ci to compute a 95% confidence interval for the correlation between the
#body weight (body) and the weight of the brain (brain) of the mammals data.
#Use your function compute.cor.ci to also compute a 95% confidence interval for the correlation between the
#logarithm of the body weight (body) and the logarithm of the weight of the brain (brain) of the mammals
#data.
library(MASS)
compute.cor.ci(body,brain)
temp=cor(x,y)
#task 4
#(a) Write a function z.transform that takes r as its only argument and which returns ζ(r). Your function
#should return an error message if r 6∈ (−1, 1).
z.transform=function(r){
if(r<-1|r>-1) return("r scope error")
0.5*log((1+r)/(1-r))
}
#(b) Write a function inverse.z.transform that takes z as its only argument and that returns ζ −1(z).
inverse.z.transform=function(z){
(exp(2*z)-1)*(exp(2*z)+1)^-1
}
#(c) Write a function cor.ci which takes the observed correlation ρˆ, n, and α as arguments and that returns
#the asymptotic (1 − α)-confidence interval for ρ. The default value of α should be 5%. Hint: You will need to
#call the functions z.transform and inverse.z.transform you defined in parts (a) and (b).
cor.ci=function(r.hat,n,alpha=0.05){
x1=inverse.z.transform(z.transform(r.hat)-qnorm(1-alpha/2)/sqrt(n-3))
x2=inverse.z.transform(z.transform(r.hat)+qnorm(1-alpha/2)/sqrt(n-3))
c(x1,x2)
}
#(d) Write a function compute.cor.ci which takes two vectors x and y as well as α as its arguments and
#which returns a (1 − α)-confidence interval for the correlation between x and y. Hint: You can use the built-in
#function cor to compute the correlation between x and y. Then use the function $cor.ci* from part (c) to
#compute the confidence interval.
compute.cor.ci=function(x,y,alpha=0.95){
temp=cor(x,y)
cor.ci(temp,n)
}
compute.cor.ci(body,brain)
compute.cor.ci(body,log(brain))
compute.cor.ci(mammals$body,mammals$brain)
#(d) Write a function compute.cor.ci which takes two vectors x and y as well as α as its arguments and
#which returns a (1 − α)-confidence interval for the correlation between x and y. Hint: You can use the built-in
#function cor to compute the correlation between x and y. Then use the function $cor.ci* from part (c) to
#compute the confidence interval.
compute.cor.ci=function(x,y,alpha=0.95){
temp=cor(x,y)
cor.ci(temp,nrow(x)+nrow(y))
}
#(e) In this part you will use the mammals data from the library MASS.
#Use your function compute.cor.ci to compute a 95% confidence interval for the correlation between the
#body weight (body) and the weight of the brain (brain) of the mammals data.
#Use your function compute.cor.ci to also compute a 95% confidence interval for the correlation between the
#logarithm of the body weight (body) and the logarithm of the weight of the brain (brain) of the mammals
#data.
library(MASS)
compute.cor.ci(mammals$body,mammals$brain)
compute.cor.ci(mammals$body,log(mammals$brain))
install.packages("pdftools")
library("pdftools")
setwd("Users/kurisuuu/Documents/glasgow_stats_2021/design")
setwd("Users/kurisuuu/Documents/glasgow_stats_2021/design")
setwd("Users/kurisuuu/Documents/glasgow_stats_2021/design")
setwd("/Users/kurisuuu/Documents/glasgow_stats_2021/design")
pdf_subset('/Users/kurisuuu/Documents/glasgow_stats_2021/design/Design_notes.pdf',
pages = 76:91, output = "CH7.pdf")
N=12
truebeta=c(3,2,-2)
truesigma2=1
dB=rep(c(-1,0,1),each=4)
dB=rep(c(-1,0,1),each=4)
dA=rep(c(-1,-1/3,1/3,1),each=3)
dB=rep(c(-1,0,1),each=4)
dA=rep(c(-1,-1/3,1/3,1),each=3)
reps=10000
betaB=matrix(0,nrow=reps,ncol=3)
betaA=matrix(0,nrow=reps,ncol=3)
N=12
truebeta=c(3,2,-2)
truesigma2=1
dB=rep(c(-1,0,1),each=4)
dA=rep(c(-1,-1/3,1/3,1),each=3)
reps=10000
betaB=matrix(0,nrow=reps,ncol=3)
betaA=matrix(0,nrow=reps,ncol=3)
for(i in 1:reps){
eps=rnorm(n=N,mean=0,sd=sqrt(truesigma2)) #error term
yA=truebeta[1]+dA*truebeta[2]+(dA^2)*truebeta[3]+eps
yB=truebeta[1]+dB*truebeta[2]+(dB^2)*truebeta[3]+eps
modA=lm(yA~dA+I(dA^2))
modB=lm(yB~dB+I(dB^2))
betaA[i,]=modA$coefficients
betaB[i,]=modB$coefficients
}
