movies=subset(movies,!is.na(movies$days))
movies=subset(movies,!is.na(movies$top))
#6. [2 marks] Define a variable called log.gross which contains, for each movie
#in the dataframe, the log transformed gross revenue. Add this variable to the
#movies dataframe. (The additional column name should be log.gross and the
#resulting dataframe should still be called movies)
#movies=transform(movies,log.gross=log(gross))
#correct
log.gross <- log(movies$gross)
movies <- transform(movies, log.gross=log.gross)
###correct
#Ans
movies <- subset(movies, !is.na(movies$top)&!is.na(movies$days))
#1 [2 marks] Use R to read in the file julymovies.csv *correctly* and
#save it as a dataframe called movies.
movies=read.csv('julymovies.csv',na.string="*")
#19_CT_1.R
setwd("/Users/kurisuuu/Documents/glasgow_stats_2021/introtoR/2019_CT1-20210210/M")
#1 [2 marks] Use R to read in the file julymovies.csv *correctly* and
#save it as a dataframe called movies.
movies=read.csv('julymovies.csv',na.string="*")
#1 [2 marks] Use R to read in the file julymovies.csv *correctly* and
#save it as a dataframe called movies.
movies=read.csv('julymovies.csv',na.string="*")
#2. [2 marks] Define a variable called lionsgate which contains the
#number of movies within the dataframe movies which were distributed by Lionsgate.
#阅读理解错误，是求sum
#lionsgate=subset(movie,movie$distributor=='Lionsgate')
#i=0
#sum=0
#lionsgate=length(lionsgate$days)
#一开始错，修改后也work，直接用length导出
lionsgate=sum(movies$distributor=="Lionsgate")
#3. [2 marks] Define a vector called missing which contains the number of missing
#values for each variable in the movies dataframe.
#In other words, the vector missing should have many elements as there are columns in the movies
#dataframe and each element in missing should correspond to one of the columns.
subset(movies,(movies$title=='NA'))
subset(movies,(movies$dis=='NA'))
subset(movies,(movies$g=='NA'))
subset(movies,(movies$thea=='NA'))
subset(movies,(movies$days=='NA'))
subset(movies,(movies$date=='NA'))
subset(movies,(movies$top=='NA'))
### WRONG!
#用is.na()，利用colsum，生成每一个col的sum，从而实现分col求和
missing=colSums(is.na(movies));missing
#4. [3 marks] Update the movies data frame by removing all rows where the values of days and top are
#missing. The updated dataframe should be called movies.
movies=subset(movies,!is.na(movies$days))
movies=subset(movies,!is.na(movies$top))
###correct
#Ans
movies <- subset(movies, !is.na(movies$top)&!is.na(movies$days))
#5. [2 marks] Define a variable called average.gross which contains the average
#revenue per theatre for movies distributed by Walt Disney
#movies_yuno=subset(movies,movies$dis=="Walt Disney")
#movies_yuno=transform(movies_yuno,average.rev=gross/theaters)
#average.gross=movies_yuno$average.rev
#wrong(changed)
#ans
disney=subset(movies, movies$distributor=="Walt Disney")
average.gross=sum(disney$gross)/sum(disney$theaters)
#6. [2 marks] Define a variable called log.gross which contains, for each movie
#in the dataframe, the log transformed gross revenue. Add this variable to the
#movies dataframe. (The additional column name should be log.gross and the
#resulting dataframe should still be called movies)
#movies=transform(movies,log.gross=log(gross))
#correct
log.gross <- log(movies$gross)
movies <- transform(movies, log.gross=log.gross)
#7. [2 marks] Sort the movies data frame by number of theaters.
#The sorted dataframe should be called movies.
#a=sort(movies$theaters)
#movies=movies[a,]
#怎么重新排序呢？没思路 wrong!
#按行排序
#answer
movies=movies[order(movies$theaters),]
#Wrong! 怎么弄top100呢？
#如何控制cex呢？1+unclass
mycol=c("blue","red")
plot(log.gross~theaters,data=movies,
#cex.axis=1.1, cex.lab=1.1, cex.main=1.1,
col=mycol[unclass(movies$top)+1],
main="log(Gross Revenue) vs Number of Theaters",
pch=19,
cex = unclass(movies$top)+1)
legend("bottomright",pch=19,col=c("red","blue"),
legend=c("in top 100","outside top 100"))
legend("bottomright",pch=19,col=c("red","blue"),
legend=c("in top 100","outside top 100"))
legend("bottomright",pch=19,col=c("red","blue"),
legend=c("in top 100","outside top 100"))
#9 Define a matrix X which is the design matrix required for fitting a fractional polynomial regression
#model where log transformed gross revenue is the response, y, and number of theaters is the covariate,
#x.
x=movies$theaters
y=movies$log.gross
X=cbind(x^-1,x^-0.5,1,sqrt(x),x)
y.hat=X%*%beta
#10. [3 marks] Using the design matrix, X, from Question 9 define a vector y.hat which contains,
#ˆy = (yˆ1, ...yˆn), the fitted values for the fractional polynomial regression between the log transformed
#revenue (response) and number of theaters (covariate).
beta=solve(t(X)%*%X,t(X)%*%y)
y.hat=X%*%beta
#10. [3 marks] Using the design matrix, X, from Question 9 define a vector y.hat which contains,
#ˆy = (yˆ1, ...yˆn), the fitted values for the fractional polynomial regression between the log transformed
#revenue (response) and number of theaters (covariate).
beta=solve(t(X)%*%X,t(X)%*%y)
y.hat=X%*%beta
#11. [2 marks] Add the fitted fractional polynomial regression line to the plot produced in Question 8. You
#should add a thick green line to represent the fitted model. Your plot should look like the one at the
#top of page 4.
#怎么添加这条线啊？？？
#不是abline，是lines
lines(movies$theaters,y.hat,col="green",lwd=3)
#12. Define a variable Rsq which contains the R2 value for the fitted fractional polynomial regression line
#computed in Question 10.
Rsq=1-sum((y-y.hat)^2)/sum((y-mean(y))^2)
#or
y <- log.gross
n <- length(y)
f <- y.hat
Rsq <- 1-(sum((y-f)^2)/sum((y-mean(y))^2))
#13 Use a simulation based on 1000 possible journeys to define a vector called late which contains the
#probability Susan arrives after the movie starts at 8pm.
set.seed(123)
setwd("/Users/kurisuuu/Documents/glasgow_stats_2021/introtoR/2019_CT2-20210210/M/")
load('ca-fires.Rdata')
fires$year[which.max(fires$acres.burned)]
#Q2. [2 marks] Create a variable called dec which contains a sequence from 1930
#to 2020 increasing in units of 10.
dec=seq(1930,2020,by=10)
#***Q3 [3 marks] Using the sequence dec and the cut function create a new variable called decade which
#contains for each row the decade that year falls in, i.e. for 1933 the decade will be 1930, for 1990 the decade
#will be 1990, etc.
decade=cut(fires$year,breaks=dec,right=F,labels=dec[-10])
?cut
#***Q4. [2 marks] Define a vector s which contains the total number of fires per decade.
s=by(fires$year,decade,sum)
#***Q4. [2 marks] Define a vector s which contains the total number of fires per decade.
s=by(fires$year,decade,sum)
#***Q4. [2 marks] Define a vector s which contains the total number of fires per decade.
s=by(fires$year,decade,sum)
# Q5. [2 marks] Using s, find the decade with the highest number of fires.
#Note: If, for example, the highest number of fires occurred in the
#decade of the 1930s (i.e., in any year from 1930 till 1939), then you should report 1930.
names(which.max(s))
#Q6. [3 marks] Plot the number of fires versus the cost (dollar damage) in log-scale using a different colour
#for each decade. Your plot should look like the one below, which was produced using colour i for the i-th
#decade, i = 1, 2, . . . , 9.
#fires=transform(fires,logd=log(dollar.damage))
plot(fires$n.of.fires,fires$logd,
main="Number of fires versus cost (log scale)",
xlab="number of fires",ylab="Cost (log scale)",
pch=19,col=1+unclass(decade))
### or
plot(fires$n.of.fires,log(fires$dollar.damage),col=decade,pch=20,
xlab = 'Number of fires',
ylab = 'Cost (log scale)', main = 'Number of fires versus cost (log scale)')
#Q6. [3 marks] Plot the number of fires versus the cost (dollar damage) in log-scale using a different colour
#for each decade. Your plot should look like the one below, which was produced using colour i for the i-th
#decade, i = 1, 2, . . . , 9.
#fires=transform(fires,logd=log(dollar.damage))
plot(fires$n.of.fires,fires$logd,
main="Number of fires versus cost (log scale)",
xlab="number of fires",ylab="Cost (log scale)",
pch=19,col=1+unclass(decade))
### or
plot(fires$n.of.fires,log(fires$dollar.damage),col=decade,pch=20,
xlab = 'Number of fires',
ylab = 'Cost (log scale)', main = 'Number of fires versus cost (log scale)')
#Q6. [3 marks] Plot the number of fires versus the cost (dollar damage) in log-scale using a different colour
#for each decade. Your plot should look like the one below, which was produced using colour i for the i-th
#decade, i = 1, 2, . . . , 9.
fires=transform(fires,logd=log(dollar.damage))
plot(fires$n.of.fires,fires$logd,
main="Number of fires versus cost (log scale)",
xlab="number of fires",ylab="Cost (log scale)",
pch=19,col=1+unclass(decade))
### or
plot(fires$n.of.fires,log(fires$dollar.damage),col=decade,pch=20,
xlab = 'Number of fires',
ylab = 'Cost (log scale)', main = 'Number of fires versus cost (log scale)')
#Q7. [2 marks] Create a new variable called year.group, which takes the following values
?ifelse
year.group=ifelse(fires$year<1974,1,2)
#Q9. [2 marks] The test rejects the null hypothesis of equal means if t > t? = 1.99. Define a variable called
#out.t.test which is TRUE if t > t? and FALSE otherwise
tstar=1.99
#Q8. [3 marks] Compute t given below (t is known as the Welch’s t-test)
x1 = fires$acres.burned[year.group == 1] #定位year group 1
x2 = fires$acres.burned[year.group == 2] #定位year group 2
n1=length(x1)
n2=length(x2)
s1.2=var(x1)
s2.2=var(x2)
delta=sqrt(s1.2/n1+s2.2/n2)
t=(mean(x1)-mean(x2))/delta;t
t.test(x1,x2)
#Q9. [2 marks] The test rejects the null hypothesis of equal means if t > t? = 1.99. Define a variable called
#out.t.test which is TRUE if t > t? and FALSE otherwise
tstar=1.99
out.t.test=ifelse(t>tstar,T,F)
#or
out.t.test = t > 1.99; out.t.test
sample.gamma=function(n,k,theta){
out=rep(NA,n)
for(i in 1:n)
out[i]=sum(rexp(k,theta))
out
}
sample.gamma=function(n,k,theta){
out=rep(NA,n)
for(i in 1:n)
out[i]=sum(rexp(k,theta))
out
}
#Q14. [6 marks] Using rejection sampling, write a function called sampleGammaRej which takes the desired
#sample size n as well as the parameters α and θ as arguments and which returns a sample of size n from the
#Ga(α, θ) distribution. Your function should stop and return the message invalid parameters if θ ≤ 1 or
#α ≤ 1.
sampleGammaRej=function(n,alpha,theta){
if(theta<=1|alpha<=1) {stop("invalid parameters")}
else{
iter=0
y=NULL
repeat{
iter=iter+1
k=floor(alpha)
x=sample.gama(1,k,theta)
u=runif(1)
M = dgamma(alpha-k, shape = alpha, rate = theta)/dgamma(alpha-k, shape = alpha,
rate = (theta-1))
p = dgamma(x, shape = alpha, rate = theta)/(M * dgamma(x, shape = alpha,
rate = (theta-1)))
if(u<p)
y=c(y,x)
if(iter==n) break
}
return(y)
}
}
###part 1)
x<-rnorm(100)
mean(x)
median(x)
###Question 6 Create a vector u containing all integers between 1 and 100. Replace all elements from u that are
#less than 55 by the number 0.
###1) create the vector u
u<-1:100
###Question 6 Create a vector u containing all integers between 1 and 100. Replace all elements from u that are
#less than 55 by the number 0.
###1) create the vector u
u<-1:100
###OR###
u<-seq(1,100,by=1)
###2) replace all values that are smaller than 55 by 0
u[u<=55]<-0 ###option 1
u[u<55]==0  ###option 2
u[u<55]<-0  ###option 3 CORRECT
A <- matrix(rnorm(9e6), nrow=3e3) # Create matrix A with random entries (3000x3000)
B <- matrix(rnorm(9e6), nrow=3e3) # Create matrix B with random entries (3000x3000)
x <- rnorm(3e3) # Create vector x with random entries (3000x1)
(A%*%B)%*%x
A%*%(B%*%x)
###8) compute the square of the product of the diagonal entries of L
prod(diag(L))^2
det(A)
#R lab 4
#task 1
#1. Read the data correctly into R.
#2. Create a scatterplot of sepal length and sepal width, where different species are denoted by a different
#plotting symbol and a different color.
#3. Add a legend to the plot and the title Fisher's iris data. Your final plot should look like the
#following one.
setwd("/Users/kurisuuu/Documents/glasgow_stats_2021/introtoR/W4data")
iris=read.csv("iris.csv")
c=as.factor(iris$Species)
plot(Sepal.Width~Sepal.Length,data=iris,
col=unclass(c),xlab="Speal.Length",ylab="Speal.Width",pch=unclass(c),
lwd=2,main="Fisher's iris data")
legend("topleft",pch=1:nlevels(c),col=1:nlevels(c),
legend=levels(c),cex=0.7)
#task 2
#1 Create boxplots of the variable FL, RW, CL, CW and BD
par(mfcol=c(2,2))
crab=read.csv("crab.csv")
crab <- transform(crab, sex = factor(sex), sp = factor(sp))
boxplot(crab[,4:8])
#task 2
#1 Create boxplots of the variable FL, RW, CL, CW and BD
par(mfcol=c(2,2))
crab=read.csv("crab.csv")
crab <- transform(crab, sex = factor(sex), sp = factor(sp))
boxplot(crab[,4:8])
#task 2
#1 Create boxplots of the variable FL, RW, CL, CW and BD
par(mfcol=c(2,2))
crab=read.csv("crab.csv")
crab <- transform(crab, sex = factor(sex), sp = factor(sp))
boxplot(crab[,4:8])
a=subset(crab,crab$sp=="O")
b=subset(crab,crab$sp=="B")
CW.orange=c(a$CW)
crab=read.csv("crab.csv")
crab <- transform(crab, sex = factor(sex), sp = factor(sp))
boxplot(crab[,4:8])
#task 2
#1 Create boxplots of the variable FL, RW, CL, CW and BD
par(mfcol=c(2,2))
crab=read.csv("crab.csv")
crab <- transform(crab, sex = factor(sex), sp = factor(sp))
boxplot(crab[,4:8])
CW.orange=crab$CW[crab$sp=="O"]
CW.blue=crab$CW[crab$sp=="B"]
#or
par(mflow=c(1,1))
CW.orange=crab$CW[crab$sp=="O"]
#or
par(mflow=c(1,1))
CW.orange=crab$CW[crab$sp=="O"]
CW.blue=crab$CW[crab$sp=="B"]
boxplot(CW.blue,CW.orange,names=c("Blue","Orange")
#or
par(mflow=c(1,1))
CW.orange=crab$CW[crab$sp=="O"]
CW.blue=crab$CW[crab$sp=="B"]
boxplot(CW.blue,CW.orange,names=c("Blue","Orange")
#or
par(mflow=c(1,1))
CW.orange=crab$CW[crab$sp=="O"]
CW.blue=crab$CW[crab$sp=="B"]
boxplot(CW.blue,CW.orange,names=c("Blue","Orange"))
#3 Create the same boxplots as in part 2 without creating the vectors CW.orange and CW.blue
boxplot(subset(crab,crab$sp=="O")$CW,subset(crab,crab$sp=="B")$CW,
names=c('Orange','Blue'),
border=c('orange','blue'))
###or
boxplot(CW~sp, data=crab,col=c("blue","orange"))
###or
boxplot(FL~sp, data=crab,col=c("blue","orange"))
boxplot(RW~sp, data=crab,col=c("blue","orange"))
boxplot(CL~sp, data=crab,col=c("blue","orange"))
boxplot(BD~sp, data=crab,col=c("blue","orange"))
#or
par(mflow=c(1,1))
###or
boxplot(FL~sp, data=crab,col=c("blue","orange"))
boxplot(RW~sp, data=crab,col=c("blue","orange"))
boxplot(CL~sp, data=crab,col=c("blue","orange"))
boxplot(BD~sp, data=crab,col=c("blue","orange"))
#task 2
#1 Create boxplots of the variable FL, RW, CL, CW and BD
par(mfcol=c(2,2))
###or
boxplot(FL~sp, data=crab,col=c("blue","orange"))
boxplot(RW~sp, data=crab,col=c("blue","orange"))
boxplot(CL~sp, data=crab,col=c("blue","orange"))
boxplot(BD~sp, data=crab,col=c("blue","orange"))
#5 Create a scatter plot of the columns CW (carapace width) and BD (body depth)
plot(BD~CW,data=crab)
#or
plot(crab$CW,crab$BD)
#6 It is usually a good idea to both have self-explanatory axis labels and to give the units of measurement.
#Change your command from part 5 so that the axis label on the horizontal axis is Carapace width
#(in mm) and that the label on the vertical axis is Body depth (in mm). The title of the plot should
#be Two Species of Leptograpsus.
plot(BD~CW,data=crab,xlab="s Carapace width(in mm)",ylab="Body depth (in mm)",
main="Body depth (in mm)")
#8 The two species are actually called blue and orange. Change your plotting command so that it uses
# these two colours
my.cols=c('blue','orange')
plot(BD~CW,data=crab,xlab="Carapace width(in mm)",ylab="Body depth (in mm)",
main="Two Species of Leptograpsus.",col=my.cols[unclass(factor(crab$sp))],
pch=unclass(d))
class(crab$sp)
#9 Add a legend to your plot, which explains both the plotting symbols and the colours used, as in the
#plot below.
c=factor(crab$sp)
legend("topleft",pch=1:nlevels(c),col=c("blue","blue","orange","orange"),
legend=c("blue female","blue male","orange female","orange male"),cex=1)
legend("topleft",pch=1:nlevels(c),col=c("blue","blue","orange","orange"),
legend=c("blue female","blue male","orange female","orange male"),cex=1)
legend("topleft",pch=1:nlevels(c),col=c("blue","blue","orange","orange"),
legend=c("blue female","blue male","orange female","orange male"),cex=1)
legend("topleft",pch=1:nlevels(c),col=c("blue","blue","orange","orange"),
legend=c("blue female","blue male","orange female","orange male"),cex=1)
legend("topleft",pch=1:nlevels(c),col=c("blue","blue","orange","orange"),
legend=c("blue female","blue male","orange female","orange male"),cex=1)
legend("topleft",pch=1:nlevels(c),col=c("blue","blue","orange","orange"),
legend=c("blue female","blue male","orange female","orange male"),cex=1)
legend("topleft",pch=1:nlevels(c),col=c("blue","blue","orange","orange"),
legend=c("blue female","blue male","orange female","orange male"),cex=1)
legend("topleft",pch=1:nlevels(c),col=c("blue","blue","orange","orange"),
legend=c("blue female","blue male","orange female","orange male"),cex=1)
legend("topleft",pch=1:nlevels(c),col=c("blue","blue","orange","orange"),
legend=c("blue female","blue male","orange female","orange male"),cex=1)
nlevels(c)
c=factor(crab$sp)
1:nlevels(c)
c
legend("topleft",pch=1:2,col=c("blue","blue","orange","orange"),
legend=c("blue female","blue male","orange female","orange male"),cex=1)
legend("topleft",pch=1:3,col=c("blue","blue","orange","orange"),
legend=c("blue female","blue male","orange female","orange male"),cex=1)
2
legend("topleft",pch=1:2,col=c("blue","blue","orange","orange"),
legend=c("blue female","blue male","orange female","orange male"),cex=1)
nlevels(c)
legend("topleft",pch=1:nlevels(c),col=c("blue","blue","orange","orange"),
legend=c("blue female","blue male","orange female","orange male"),cex=1)
#10 What happens when you run the commands rug(crabs$CW) and rug(crabs$BD, side=2) after you
#have created the scatter plot?
rug(crab$CW)
rug(crab$BD,side=2)
?rug
#11 Use the function pairs to create a scatter plot of all measurements in the data set. Just like in the
#previous task, the plotting symbol should reflect the sex and the colour should reflect the species.
crab$sp.col <- ifelse(crab$sp=="O", "orange", "blue")
#10 What happens when you run the commands rug(crabs$CW) and rug(crabs$BD, side=2) after you
#have created the scatter plot?
rug(crab$CW)
rug(crab$BD,side=2)
#11 Use the function pairs to create a scatter plot of all measurements in the data set. Just like in the
#previous task, the plotting symbol should reflect the sex and the colour should reflect the species.
crab$sp.col <- ifelse(crab$sp=="O", "orange", "blue")
#11 Use the function pairs to create a scatter plot of all measurements in the data set. Just like in the
#previous task, the plotting symbol should reflect the sex and the colour should reflect the species.
crab$sp.col <- ifelse(crab$sp=="O", "orange", "blue")
pairs(crab[,c("FL", "RW", "CL","CW","BD")], col=crab$sp.col)
#11 Use the function pairs to create a scatter plot of all measurements in the data set. Just like in the
#previous task, the plotting symbol should reflect the sex and the colour should reflect the species.
crab$sp.col <- ifelse(crab$sp=="O", "orange", "blue")
pairs(crab[,c("FL", "RW", "CL","CW","BD")], col=crab$sp.col)
#11 Use the function pairs to create a scatter plot of all measurements in the data set. Just like in the
#previous task, the plotting symbol should reflect the sex and the colour should reflect the species.
crab$sp.col <- ifelse(crab$sp=="O", "orange", "blue")
pairs(crab[,c("FL", "RW", "CL","CW","BD")], col=crab$sp.col)
###or
pairs(crab[,4:8],col=my.cols[unclass(factor(crab$sp))],
pch=unclass(factor(crab$sex)))
#10 What happens when you run the commands rug(crabs$CW) and rug(crabs$BD, side=2) after you
#have created the scatter plot?
rug(crab$CW)
rug(crab$BD,side=2)
#11 Use the function pairs to create a scatter plot of all measurements in the data set. Just like in the
#previous task, the plotting symbol should reflect the sex and the colour should reflect the species.
crab$sp.col <- ifelse(crab$sp=="O", "orange", "blue")
pairs(crab[,c("FL", "RW", "CL","CW","BD")], col=crab$sp.col)
pairs(crab[,c("FL", "RW", "CL","CW","BD")], col=crab$sp.col)
#13
ratio=crab$CW/crab$BD
boxplot(ratio~crab$sp)
#Task3
x=seq(0,2*pi,length.out=100)
y=sin(x)
plot(x,y,type="l",lwd=2,xlab="x",ylab="sin(x)")
polygon(x,y,col="grey",border=NA)
lines(x,y,lwd=2)
polygon(x,y,col="grey",border=NA)
#Task 5
#part 1 Connect all pairs of points using blue lines. Your plot should look like the one shown below (except for
#the thick red line). Hint: You will need two nested for loops
n=10
set.seed(16022021)
coords=matrix(rnorm(2*n),ncol=2)
plot(coords)
coords
n <- 10 # Simulate points
coords <- matrix(rnorm(2*n), ncol=2)
plot(coords, pch=16, xlab="x", ylab="y") # Draw the points
for (i in 1:n) # For all pairs of points ...
for (j in 1:n)
lines(coords[c(i,j),], col="blue") # Connect i-th and j-th point
closest.pair <- c(NA,NA) # Initialise closest pair
closest.distance <- Inf # Initialise closest distance
for (i in 1:(n-1)) # Go through all pairs of points
for (j in (i+1):n){
dist <- sum((coords[i,]-coords[j,])^2) # Compute (squared) distance
if (dist<closest.distance) { # If we find a pair which is closer ...
closest.pair <- c(i,j) # ... store it ...
closest.distance <- dist # ... along with the distance
}
}
for (j in (i+1):n){
dist <- sum((coords[i,]-coords[j,])^2) # Compute (squared) distance
if (dist<closest.distance) { # If we find a pair which is closer ...
closest.pair <- c(i,j) # ... store it ...
closest.distance <- dist # ... along with the distance
}
}
lines(coords[closest.pair,], col="red", lwd=4)
closest.pair
test=rbind(c(16,4.5),c(4.5,9))
corr_matrix(test)
#Task 4
#Your function should be named corr_mat, take the covariance matrix sigma as only argument and should
#return the matrix of correlations.
corr_matrix=function(sigma){
sds=sqrt(diag(sigma))
R=matrix(nrow=nrow(sigma),ncol=ncol(sigma))
for(i in 1:nrow(R)){
for(j in 1:ncol(R)){
R[i,j]=sigma[i,j]/(sds[i]*sds[j])
}
}
R
}
test=rbind(c(16,4.5),c(4.5,9))
corr_matrix(test)
